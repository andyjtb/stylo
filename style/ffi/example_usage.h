/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

/**
 * Example C++ usage of Stylo CSS parsing FFI
 * 
 * This header demonstrates how to use the exposed CSS parsing facilities
 * from C++. The actual bridge header will be generated by cxx in the build.
 */

// Include the generated cxx bridge header
// #include "rust/cxx.h"
// #include "stylo/ffi/mod.rs.h"

#include <string>
#include <iostream>

// Example usage:
/*

// Parse a CSS stylesheet
auto result = parse_stylesheet(
    "body { color: red; font-size: 16px; }",
    "https://example.com/style.css"
);

if (result.success) {
    std::cout << "Stylesheet parsed successfully!" << std::endl;
} else {
    std::cerr << "Parse error: " << result.error_message << std::endl;
}

// Parse a media query
auto media_result = parse_media_query("(min-width: 768px)");
if (media_result.success) {
    std::cout << "Media query parsed successfully!" << std::endl;
}

// Parse a CSS value
auto value_result = parse_css_value("10px", "width");
if (value_result.success) {
    std::cout << "CSS value: " << value_result.value << std::endl;
}

// Evaluate a calc() expression
auto calc_result = evaluate_calc_expression("42");
if (calc_result.success) {
    std::cout << "Calc result: " << calc_result.value << std::endl;
}

// Get computed value
auto computed = get_computed_value("2em", "font-size", 16.0f);
if (computed.success) {
    std::cout << "Computed value: " << computed.value << std::endl;
}

*/

// The actual types and functions are generated by cxx from the Rust code
// and will be available through the generated header file:
// 
// - parse_stylesheet(css: &str, base_url: &str) -> ParseResult
// - parse_css_value(value: &str, property_name: &str) -> ParsedCSSValue
// - evaluate_calc_expression(expr: &str) -> CalcResult
// - parse_media_query(query: &str) -> ParseResult
// - get_computed_value(value: &str, property_name: &str, base_font_size: f32) -> ParsedCSSValue
//
// Structs:
// - ParseResult { success: bool, error_message: String }
// - ParsedCSSValue { value: String, success: bool }
// - CalcResult { value: f32, success: bool }
